datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Plan {
  FREE
  PRO
  MAX
}

model UserSettings {
  id          String   @id @default(cuid())
  userId      String
  emailNotify Boolean @default(true) @map("email_notify")
  inboxPrimary Boolean @default(true) @map("inbox_primary")
  inboxSocial  Boolean @default(false) @map("inbox_social")
  inboxPromo   Boolean @default(false) @map("inbox_promo")
  inboxUpdate  Boolean @default(false) @map("inbox_update")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

}

model Tag {
  id            String            @id @default(cuid())
  userId        String
  label         String
  description   String?
  color         String?
  predefinedId  Int?
  isActive      Boolean           @default(true) @map("is_active")
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  processedEmails ProcessedEmailsOnTags[] // Relation field to join table

  @@unique([userId, label])
}

model ProcessedEmails {
  id          String            @id @default(cuid())
  emailId     String            @unique
  emailAddress String
  userId      String
  summary     String?
  actions     String[]
  isImportant Boolean           @default(false) @map("is_important")
  createdAt   DateTime          @default(now())

  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags        ProcessedEmailsOnTags[] // Relation field to join table
}

model ProcessedEmailsOnTags {
  emailId String            // Foreign key to ProcessedEmails
  tagId   String            // Foreign key to Tag

  processedEmail ProcessedEmails @relation(fields: [emailId], references: [id], onDelete: Cascade)
  tag            Tag            @relation(fields: [tagId], references: [id], onDelete: Cascade)
  @@id([emailId, tagId])
 
}

model User {
  id                    String                  @id @default(cuid())
  username              String?                 @unique
  name                  String?
  password              String?
  email                 String                  @unique
  emailVerified         DateTime?
  image                 String?
  
  emailProcessed            Int?                     @map("email_processed")
  nextAPITime           DateTime?                @map("next_ai_analysys")
  stripeSubscriptionId      String?                 @unique @map("stripe_subscription_id")
  stripePriceId             String?                 @map("stripe_price_id")
  stripeCurrentPeriodEnd    DateTime?               @map("stripe_current_period_end")
  stripeCustomerId          String?                 @unique @map("stripe_customer_id")
  changeToFreePlanOnPeriodEnd Boolean?            @default(false)  @map("change_to_free_plan_on_period_end")

  autoUpdate              Boolean                @default(true) @map("auto_update")
  lastAutoUpdate             DateTime            @default(now())   @map("last_updated")

  updatePrimary          Boolean                @default(true) @map("update_primary")
  updateSocial           Boolean                @default(false) @map("update_social")
  updatePromo            Boolean                @default(false) @map("update_promo")
  updateUpdate           Boolean                @default(true) @map("update_update")
  lastFreeTierRefillDate DateTime?              @map("last_free_tier_refill_date")

  accounts              Account[]

  tags                  Tag[]

  inboxes               Inbox[]

  setting               UserSettings[]

  processedEmails       ProcessedEmails[]
  
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
}

model Inbox {
  id          String   @id @default(cuid())
  userId      String

  createdAt   DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  userId            String
  type              String
  email             String?
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  accountId         Int      @unique @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id         String @id @default(uuid())
  email      String
  token      String @unique
  expires    DateTime

  @@unique([email, token])

  @@map("verificationTokens")
}

model PasswordResetToken {
  id         String @id @default(uuid()) 
  email      String
  token      String @unique
  expires    DateTime

  @@unique([email, token])

  @@map("passwordResetTokens")
}
